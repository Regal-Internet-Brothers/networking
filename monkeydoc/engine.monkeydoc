# Module networking.engine

# Import networking.serial
# Import networking.client
# Import networking.packet
# Import networking.megapacket
# Import networking.packetpool

# Import eternity

# Import monkey.list
# Import brl.socket
# Import brl.asyncevent

This acts as the main implementation-module, import [[networking]] (Ideally) or this. For details, view the [[NetworkEngine]] class's documentation. This API reserves the right to ignore "Async" settings if necessary. In addition, argument defaults described by this documentation may not reflect the actual code, but will be present regardless of their real values. In other words, optional argument values may be different from document.


# Class ProtocolType Extends Int


# Interface CoreNetworkListener

This provides lower level notifications, such as bind results, and completion of (Any) send operation(s).

# Method OnNetworkBind:Void(Network:NetworkEngine, Successful:Bool)

This is called when a network bind-operation completes.

# Method OnSendComplete:Void(Network:NetworkEngine, P:Packet, Address:NetworkAddress, BytesSent:Int)

The @P object represents the "real" [[Packet]] that was sent. (Unlike [[MetaNetworkListener.OnReceiveMessage]])

# Interface MetaNetworkListener

This is used for "meta" notifications, like user-level messages, or network-disconnection.

# Method OnReceiveMessage:Void(Network:NetworkEngine, C:Client, Type:MessageType, Message:Stream, MessageSize:Int)

The @Message object will be automatically released, and should not be closed.
The @MessageSize argument specifies how many bytes are in the data-segment of @Message.

# Method OnDisconnected:Void(Network:NetworkEngine)

This is called when @Network has disconnected.

# Interface ClientNetworkListener

This is used to receive notifications of, and to moderate the behaviors of [[Client]] objects.

# Method OnClientConnect:Bool(Network:NetworkEngine, Address:NetworkAddress)

This is called when a client attempts to connect.
The return-value of this command dictates if the client at @Address should be accepted.

# Method OnClientAccepted:Void(Network:NetworkEngine, C:Client)

Assuming @C was accepted in a previous call to [[OnClientConnect]], this will be called.

# Method OnClientDisconnected:Void(Network:NetworkEngine, C:Client)

This is called when a [[Client]] disconnects.
This will not be called for client-networks, only hosts.

# Interface MegaPacketNetworkListener

This is used to receive notifications regarding the states of [[MegaPacket]] objects.

# Method OnMegaPacketRequestAccepted:Void(Network:NetworkEngine, MP:MegaPacket)

This is called when a remote [[MegaPacket]] request is accepted on this end.

# Method OnMegaPacketRequestSucceeded:Void(Network:NetworkEngine, MP:MegaPacket)

This is called when a [[MegaPacket]] request your end sent is accepted.
Not necessarily accepted for chunk I/O, though, see [[MEGA_PACKET_ACTION_REQUEST_CHUNK_LOAD]].

# Method OnMegaPacketRequestFailed:Void(Network:NetworkEngine, MP:MegaPacket)

This is called when a pending [[MegaPacket]] has been rejected by the other end.

# Method OnMegaPacketRequestAborted:Void(Network:NetworkEngine, MP:MegaPacket)

This is called on both ends, and signifies a failure by means of an "abort".

# Method OnMegaPacketFinished:Void(Network:NetworkEngine, MP:MegaPacket)

This is called when a [[MegaPacket]] is finished. (Fully built from the data we received)
This will be called before [[NetworkEngine.ReadMessageBody]] is executed.

# Method OnMegaPacketSent:Void(Network:NetworkEngine, MP:MegaPacket)

This is called when a [[MegaPacket]] is done being sent.

# Method OnMegaPacketDownSize:Bool(Network:NetworkEngine, MP:MegaPacket)

This asks if @MP should be cut down. (If unsure, return 'False')

# Interface NetworkListener Implements CoreNetworkListener, MetaNetworkListener, ClientNetworkListener, MegaPacketNetworkListener

This acts as a "macro" for those who want to use every "NetworkListener" interface.


# Class NetworkEngine Extends NetworkSerial Implements IOnBindComplete, IOnAcceptComplete, IOnConnectComplete, IOnSendComplete, IOnSendToComplete, IOnReceiveFromComplete, IOnReceiveComplete

A [[NetworkEngine]] acts as your connection or "node" in the network. At present, a [[NetworkEngine]] can be a client or a host. These documents regard "nodes" as abstract entry-points to the network. In other words, clients or hosts, or potentially actual nodes (Peer-to-peer will eventually be looked into).

[[NetworkEngine]] objects handle incoming and outgoing messages, client connections, notifications via the "NetworkListener" interfaces, just the protocol in general. They require your application to continually use the official asynchronous call-back routine, [[UpdateAsyncEvents]]. The entire framework works using asynchrnous routines, meaning it's portable across targets. There are several situations where asynchronous techniques can be user-defined, but this framework reserves the right to ignore these requests if necessary.

[[NetworkEngine]] objects handle the vast majority of what goes on behind the scenes, and they are responsible for the objects they emit. That being said, if an object is allocated via a pool, or similar system, it's up to the user to return the object(s) provided.


# Const PORT_AUTOMATIC:Int

This is used to request a port from the operating system, instead of supplying one manually.

# Const SOCKET_TYPE_UDP:ProtocolType

This is used to specify UDP as the underlying transport protocol.

# Const SOCKET_TYPE_TCP:ProtocolType

This is used to specify TCP as the underlying transport protocol.


# Const Default_PacketSize:Int
# Const Default_PacketPoolSize:Int

# Const Default_PacketReleaseTime:Duration
# Const Default_PacketResendTime:Duration
# Const Default_PingFrequency:Duration

# Const Default_MaxChunksPerMegaPacket:Int
# Const Default_MaxPing:NetworkPing

# Const Default_FixByteOrder:Bool
# Const Default_MultiConnection:Bool
# Const Default_ClientMessagesAfterDisconnect:Bool


# Function AddressesEqual:Bool(X:NetworkAddress, Y:NetworkAddress)

This compares @X and @Y, and returns 'True' if they are equal. (Deep compare)

# Function ProtocolToString:String(Protocol:ProtocolType)

This returns a string representation of @Protocol.

| @Protocol Type  | @Output
| SOCKET_TYPE_UDP | "UDP"
| SOCKET_TYPE_TCP | "TCP"


# Method New(PacketSize:Int=Default_PacketSize, PacketPoolSize:Int=Default_PacketPoolSize, FixByteOrder:Bool=Default_FixByteOrder, PingFrequency:Duration=Default_PingFrequency, MaxPing:NetworkPing=Default_MaxPing, MaxChunksPerMegaPacket:Int=Default_MaxChunksPerMegaPacket, PacketReleaseTime:Duration=Default_PacketReleaseTime, PacketResendTime:Duration=Default_PacketResendTime)

* The @PacketSize argument specifies the size used for all internally allocated packets.
* The @PacketPoolSize argument is used to generate initial packet-objects.
* The @FixByteOrder argument toggles network byte-order for internally generated packets.
* The @PingFrequency argument is used to determine how much time it takes between ping calculations.
* The @MaxPing argument is used when determining if a [[Client]] has timed out.
* The @MaxChunksPerMegaPacket argument is used to limit the number of [[Packet]] objects an incoming [[MegaPacket]] can be initialized with.
* The @PacketReleaseTime argument is used to describe how long it takes for a [[Client]] to remove the next reliable packet's [[PacketID]]. (UDP / unreliable transport protocols)
* The @PacketResendTime argument specifies how long it takes for this network to [[ReliablePacket.Resend|resend]] a [[ReliablePacket]].

# Method GenerateNativeSocket:Void(ProtocolString:String="stream")

This is used internally to generate the internal connection-socket, and close if necessary.

This constructor is protected.

# Method Init:Void(Protocol:ProtocolType, IsClient:Bool)

This is a common internal "startup constructor", called whenever [[Connect]] or [[Host]] is called.
This generates the internal socket via [[GenerateNativeSocket]].

This constructor is protected.

# Method InitReliablePackets:Void()

This initializes reliable-packet functionality. (Pooling, management, etc)

This constructor is protected.

See also: [[DeinitReliablePackets]]

# Method InitMegaPackets:Void()

This initializes mega-packet functionality.

This constructor is protected.

See also: [[DeinitMegaPackets]]


# Method Close:Void()

This command manually closes this network.

The network will automatically send remote connections a final unreliable message describing this action.
In the case of TCP (Or similar; reliable transport), this will very likely make it to the other end, disconnecting very gracefully.

When using UDP, this message is somewhat unlikely to make it to the destination(s).

If this description message ([[INTERNAL_MSG_DISCONNECT]]) is not received, this client/host will timeout on the other end(s).
This means that disconnection will happen regardless, but the elegance of this action is unlikely to be preserved. (Transport differences aside)

To disconnect via a request, and in worst case scenarios, a timeout, use [[CloseAsync]]. (Ideal)

# Method CloseAsync:Void()

This command provides a means of gracefully disconnecting from a remote network.
To manually disconnect from a network, use [[Close]].

For clients, this is done through a reliable disconnection notice ([[INTERNAL_MSG_REQUEST_DISCONNECTION]]), and assuming closing status.
The notice will be sent, then the usual behavior of [[Closing]] will be applied; limited message acceptance, eventual timeout/disconnection, etc.
Ideally, we'd get a message back, and from there, automatically call [[Close]].

For hosts, this will disconnect every client formally. It will then use the [[Terminating]] flag to check if all clients have disconnected.
Once they have, the [[Close]] command will be called automatically.

# Method DeinitReliablePackets:Void()

This deinitializes reliable-packet functionality.

This destructor is protected.

See also: [[InitReliablePackets]]

# Method DeinitMegaPackets:Void()

This deinitializes mega-packet functionality.

This destructor is protected.

See also: [[InitMegaPackets]]


# Method ObjectEnumerator:list.Enumerator<Client>()

This allows you to enumerate the connected [[Client]]s in this network.

For clients, this will only supply [[Remote]], for hosts, this provides all connected [[Client]] handles.

# Method SetCallback:Void(Callback:NetworkListener)

This sets every callback handle to @Callback.

See also: [[SetCoreCallback]], [[SetMetaCallback]], [[SetClientCallback]], [[SetMegaPacketCallback]]

# Method SetCoreCallback:Void(Callback:CoreNetworkListener)

This sets the core callback handle to @Callback.

# Method SetMetaCallback:Void(Callback:MetaNetworkListener)

This sets the meta callback handle to @Callback.

# Method SetClientCallback:Void(Callback:ClientNetworkListener)

This sets the client callback handle to @Callback.

# Method SetMegaPacketCallback:Void(Callback:MegaPacketNetworkListener)

This sets the mega-packet callback handle to @Callback.

# Method Host:Bool(Port:Int, Async:Bool=False, Protocol:ProtocolType=SOCKET_TYPE_UDP, MultiConnection:Bool=Default_MultiConnection, Hostname:String="")

This is used to host a network on @Port using @Protocol.
Once hosting has started, please call [[Update]] regularly.
When finished hosting, please call [[Close]] or [[CloseAsync]].

* The @Port argument is used to bind the network-socket using @Hostname.
* The @Async argument specifies if binding should be done asynchronously. (May be required on some targets)
* The @Protocol argument describes the desired transport protocol.
* The @MultiConnection argument dictates whether more than one connection is allowed.
* The @Hostname argument is used when binding the internal socket. (If unsure, do not specify)

The return value of this method states if hosting was successful.
If @Async is enabled, the return value will not indicate success, only initial failure.
Success would be determined using [[CoreNetworkListener.OnNetworkBind]].

See also: [[Connect]], [[Close]], [[CloseAsync]]

# Method Connect:Bool(Address:NetworkAddress, Async:Bool=False, Protocol:ProtocolType=SOCKET_TYPE_UDP)

This is used to create a client network on @Port using @Protocol.
Once a connection has been established, please call [[Update]] regularly.
When you intend to end the network-session, please call [[Close]] or [[CloseAsync]].

* The @Address argument is used to connect to a remote [[NetworkEngine]].
* The @Async argument specifies if connection should be done asynchronously. (May be required on some targets)
* The @Protocol argument describes the desired transport protocol.

See also: [[Host]], [[Close]], [[CloseAsync]]

# Method Connect:Bool(Host:String, Port:Int, Async:Bool=False, Protocol:ProtocolType=SOCKET_TYPE_UDP)

This generates a [[NetworkAddress]] object from @Host and @Port, then calls the [[Connect|main implementation]] using the arguments specified.

See also: [[Host]], [[Close]], [[CloseAsync]]

# Method Update:Void()

Call this every time when you intend to update details of the network.
For example, this routine calls [[UpdateClients]], which handles timeouts.

If the network has yet to be opened, this will do nothing. (Always safe)

See also: [[UpdateClients]]

# Method UpdateClients:Void()

This routine handles all connected clients and their [[Client|handles]].
This includes things like reliable-packet routines / calling the [[Client]] class's [[Client.Update]] method, checking for timeouts, etc.

See also: [[Update]]

# Method TimedOut:Bool(C:Client)

This checks if @C has timed out. This framework reserves the right to ignore meta-data for this action when needed.

# Method Send:Void(RP:ReliablePacket, Async:Bool=False)

This sends a pre-serialized [[ReliablePacket]] object.

@NOTE: This overload only applies to unreliable transport. (UDP, for example)
Transport protocols like TCP do not support this kind of operation, and usage will result in undefined behavior.

All [[ReliablePacket]]s should contain the entire raw message, including the reliable packet meta-data.
This will send @RP as a raw packet using its [[ReliablePacket.Destination]] property.

# Method Send:Void(P:Packet, Type:MessageType, Reliable:Bool=False, Async:Bool=True, ExtendedPacket:Bool=False)

This builds and sends a packet of @Type using @P as the data-segment, and sends to every connected [[Client]].
For hosts, this sends to clients, for clients, this sends to the host.

Please enable @Reliable if you intend for the message to always be received, even when using reliable transport.

* The @P argument represents the data you would like to send. (Packet formatting handled behind the scenes)
* The @Type argument specifies a user-level type defined by your application. (Must be [[MSG_TYPE_CUSTOM]] or above; non-zero currently)
* The @Reliable argument is used to ensure this packet makes it to its destinations. Packet ordering is not guaranteed; transport dependent.
* The @Async argument is used to toggle asynchronous output; queued, could be slower.

* The @ExtendedPacket argument is used internally to send packet chunks for [[MegaPacket]] objects. Unless you're extending the framework, @DO @NOT change this argument.

# Method Send:Void(P:Packet, C:Client, Type:MessageType, Reliable:Bool=False, Async:Bool=True, ExtendedPacket:Bool=False)

This builds and sends a packet of @Type using @P as the data-segment, and sends to @C.
For hosts, this sends to @C, for clients, this will only send to @C if it is [[Remote]].

* The @P argument represents the data you would like to send. (Packet formatting handled behind the scenes)
* The @Type argument specifies a user-level type defined by your application. (Must be [[MSG_TYPE_CUSTOM]] or above)
* The @Reliable argument is used to ensure this packet makes it to its destinations. Packet ordering is not guaranteed; transport dependent.
* The @Async argument is used to toggle asynchronous output; queued, could be slower.

* The @ExtendedPacket argument is used internally to send packet chunks for [[MegaPacket]] objects. Unless you're extending the framework, @DO @NOT change this argument.

# Method Send:Void(MP:MegaPacket, C:Client, Type:MessageType)

This overload provides an easy to use interface for sending [[MegaPacket]] objects. [[MegaPacket]] messages are always reliable.
When this message is received on the other end, it will be done as a [[MegaPacket]], and passed to your application as a [[Stream]].

* The @MP argument represents the auto-formatted user-level data you'd like to send.
* The @C argument acts as the destination we'll be sending to. (Follows the usual [[Client]] output rules)
* The @Type argument specifies a user-level type defined by your application. (Must be [[MSG_TYPE_CUSTOM]] or above)

# Method AutoSendRaw:Void(RawPacket:Packet, Async:Bool=True)

@Use @this @method @at @your @own @risk.

<p>
This is used to send a raw packet, unlike @Send, which builds a formatted raw packet around the described packet.
This doesn't handle formats, it simply sends @RawPacket to the default destination. (Clients to host, host to clients)
The @Async argument is used to toggle asynchronous output; queued, could be slower.
</p>

See also: [[Send]]

# Method AutoSendRaw:Void(RawPacket:Packet, C:Client, Async:Bool=True)

@Use @this @method @at @your @own @risk.

<p>
This is used to send a raw packet, unlike @Send, which builds a formatted raw packet around the described packet.
This doesn't handle formats, it simply sends @RawPacket to the described destination (@C). (Clients must send to hosts, hosts can send to any client)
The @Async argument is used to toggle asynchronous output; queued, could be slower.
</p>

See also: [[Send]]

# Method Disconnect:Void(C:Client)

This sends a reliable disconnection message to @C, then marks @C as [[Client.Closing]].

See also: [[DisconnectAll]]

# Method DisconnectAll:Void()

This disconnects every connected client from a host.

See also: [[Disconnect]]

# Method ForceDisconnect:Void(C:Client)

This force-releases @C, sending an unreliable notification; use at your own risk.

# Method SendForceDisconnect:Void(C:Client, Reliable:Bool=False, Async:Bool=False)

@ATTENTION: Use @ForceDisconnect instead. The only exception is if you intend to manage @C yourself. (Use at your own risk)

<p>
The [[Client]] specified (@C) will be in its original state after calling this.
However, this will send an unreliable disconnection-notice to @C.
Because of this, it is a bad idea to call this and not claim @C as closing (Manually).
This is completely unmanaged, so it's up to the caller to handle @C properly.
</p>

<p>
Technically, a "force disconnect" is unmanaged, so the best course of action would be to ignore the client everywhere.
</p>

<p>
There's two ways of doing this, the safe way, and the unsafe way:

* The safe way is considered best practice. After calling this command, manually call [[ReleaseClient]]. This will result in a proper disconnection from the host's perspective.
* The unsafe way would be to set the @C argument's [[Client.Closing]] flag. Doing this is a bad idea for forced disconnections, as internal messages will still be accepted.

And, if [[ClientMessagesAfterDisconnect]] is on, normal messages will work, too.
</p>

See also: [[ForceDisconnect]], [[DisconnectAll]], [[Disconnect]]

# Method SendForceDisconnect:Void(Reliable:Bool=False, Async:Bool=False)

<p>
This acts like the [[SendForceDisconnect|other overload]], only it sends to the default destination.
This is used internally, and should be avoided by normal users. (Use at your own risk)
</p>

See also: [[ForceDisconnect]], [[DisconnectAll]], [[Disconnect]]

# Method SendDisconnectionNotice:Void(Reliable:Bool=False, Async:Bool=False)

This overload uses automated destination resolution.

<p>
To put it simply, this will send to the host for
clients, and send to every client for a server.
</p>

<p>
By default, like [[SendForceDisconnect]], this is not a reliable message,
and may need further management after calling.
</p>

<p>
If @Reliable is enabled, this will send a [[INTERNAL_MSG_REQUEST_DISCONNECTION]] message.
If it's disabled, [[INTERNAL_MSG_DISCONNECT]] will be sent.
</p>

See also: [[ForceDisconnect]], [[DisconnectAll]], [[Disconnect]], [[SendDisconnect]], [[SendForceDisconnect]], [[SendDisconnectToAll]]

# Method SendDisconnect:Void(C:Client)

@ATTENTION: This routine does not perfectly disconnect [[Clients]] objects on its own.

<p>
This command should only be called by users for debugging purposes,
or in the case of lax disconnection environments.
</p>

<p>
This is used internally by [[DisconnectClient]], which is
the proper way to disconnect a [[Client]] from this network.
</p>

# Method SendDisconnectToAll:Void()

This will send reliable disconnection messages to all connected clients.
The rules applied to [[SendDisconnect]] apply here, the difference being that this should only be called by hosts.

See also: [[ForceDisconnect]], [[DisconnectAll]], [[Disconnect]], [[SendDisconnect]], [[SendForceDisconnect]], [[SendDisconnectionNotice]]

# Method BuildOutputMessage:Packet(P:Packet, Type:MessageType, ExtendedPacket:Bool=False, DefaultSize:Int=0)

<p>Used internally; use at your own risk.</p>

<p>
This command produces a packet in the appropriate format.
This will generate a "system packet", which is handled internally.
For details on the @DefaultSize' argument, please see [[WriteMessage]].
</p>

<p>
Internal messages do not serialize their data-segments' lengths.
</p>

# Method BuildReliableMessage:Void(Data:Packet, Type:MessageType, RP:ReliablePacket, ExtendedPacket:Bool=False)

<p>Used internally; use at your own risk.</p>

<p>
This will take the contents of @Data, transfer it to @RP, as well as write any needed formatting.
This allows you to use @RP as a normal system-managed packet.
</p>

<p>[[ReliablePacket]] objects should not be used by TCP networks.</p>

See also: [[BuildOutputMessage]]

# Method BuildReliableMessage:ReliablePacket(Data:Packet, Type:MessageType, C:Client, ExtendedPacket:Bool=False)

<p>This will generate a [[ReliablePacket]] automatically, then call the primary implementation; the same restrictions apply.</p>

See also: [[BuildOutputMessage]]

# Method IsCallback:Bool(Callback:NetworkListener)

This specifies if @Callback is in any way a callback internally.

# Method AllocatePacket:Packet()

<p>This allocates and initializes a [[Packet]] object for general use, usually from a pool.</p>
<p>This object can be used to read (Requires extension) or write messages. Once finished, you can call [[Send]], or [[AutoSendRaw]], depending on your use-case.<p>

Because this is likely from a pool, please call [[ReleasePacket]] when finished with the [[Packet]] object you get from this.

# Method ReleasePacket:Bool(P:Packet)

<p>This releases a [[Packet]] object allocated from [[AllocatePacket]].</p>
<p>Passing an object that was not from [[AllocatePacket]] is considered "unsafe", and will result in undefined behavior.</p>
<p>The return-value of this method indicates if the object was accepted. For most cases, just call this without worrying about the return-value.</p>

See also: [[AllocatePacket]]

# Method GetClient:Client(Address:NetworkAddress)

This is used to retrieve a [[Client]] object using its address.

<p>Do not keep a long-term handle to this object unless you intend to accept [[ClientNetworkListener.OnClientDisconnected]] notifications.</p>

See also: [[ObjectEnumerator]]

# Method GetClient:Client(S:Socket)

<p>
Generally speaking, this should only be called when using TCP; for a general
purpose routine, please use the [[GetClient|overload]] accepting a [[NetworkAddress]].
</p>

<p>This retrieves a [[Client]] object using its socket. (Not recommended)</p>

See also: [[ObjectEnumerator]]

# Method Connected:Bool(S:Socket)

<p>This returns 'True' if a [[Client]] with @S as its [[Client.Connection|socket]] was found.</p>
<p>This is only useful for TCP; UDP always returns 'False'.</p>

See also: [[GetClient]]

# Method Connected:Bool(Address:NetworkAddress)

<p>This returns 'True' if a [[Client]] with @Address as its [[Client.Address]] was found.</p>

See also: [[GetClient]]
