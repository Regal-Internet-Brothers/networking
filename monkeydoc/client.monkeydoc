# Module networking.client

# Import networking.engine
# Import networking.megapacket

# Class Client

[[Client]] objects are "descriptors", specifying how a [[NetworkEngine]] can reach an identified node in a network.
[[Client]] objects are generated, stored, and disclosed by networks ([[NetworkEngine]]). References to [[Client]] objects are only valid until a network specifies that they are no longer connected/available. These notifications can be interpreted using a [[ClientNetworkListener]] (Callback), as specified in the '[[networking.engine]]' module.

# Method New(Address:NetworkAddress, Connection:Socket=Null, PacketConfirmation:Bool=True)

Constructors for [[Client]] objects are handled internally, and should only be used when extending this framework.

This overload is used for protocols that are address-based, rather than socket-based. (UDP)
That being said, this is also used internally by client [[NetworkEngine]] objects, for [[NetworkEngine.Remote]] (Only [[Client]] instance).

* The @Address argument specifies the remote address of the client.
* The @Connection argument is mainly available for debugging purposes / internal use.
* The @PacketConfirmation argument is described in [[Construct_Client]].

# Method New(Connection:Socket, PacketConfirmation:Bool=False)

Constructors for [[Client]] objects are handled internally, and should only be used when extending this framework.

This overload is used for protocols that are socket-based, rather than address-based. (TCP)

* The @Connection argument is used to describe the [[Socket]] associated with this client.
* The @PacketConfirmation argument is described in [[Construct_Client]].

# Method Construct_Client:Client(PacketConfirmation:Bool)

This is an internal constructor used when constructing [[Client]] objects.

* The @PacketConfirmation argument specifies if this [[Client]] will be keeping track of packet identifiers. (Non-reliable protocols)

This routine is protected, but documented for extension purposes.


# Method Close:Void(Network:NetworkEngine, ReleaseInternalData:Bool=False)

This destructor is used internally. Please disconnect clients through their parent [[NetworkEngine]] objects.

This will close a [[Socket]] if held by this object, invalidate the [[Address]] property, release any associated packet identifiers, release held [[MegaPacket]] handles, and set relevant closure-flags.

# Method Update:Void(Network:NetworkEngine)

<p>This is used to update a [[Client]] object. The main purpose of this is to handle reliable packet identifiers.</p>
<p>But this also handles ping calculation and [[MegaPacket]] handles.</p>

See also: [[UpdateWaitingMegaPackets]]

# Method UpdateWaitingMegaPackets:Void(Network:NetworkEngine)

<p>This updates any waiting [[MegaPacket]] handles; handles timeout semantics.</p>
<p>This is called internally by [[Update]].</p>

See also: [[Update]]

# Method ProjectedPing:NetworkPing(Network:NetworkEngine)

This returns the "projected ping" of this client, based on the criteria specified in @Network.
"Projected pings" are approximate pings describing how long a client has been pinging. This number is not accurate unless the [[Pinging]] property reports [[True]].

# Method ConfirmPacket:Bool(ID:PacketID)

This will confirm packets with @ID as their identifier, but only if it hasn't already been identified.
The return-value indicates if the operation failed.

# Method ContainsPacket:Bool(ID:PacketID)

This returns [[True]] if @ID has already been confirmed.

See also:

[[ConfirmPacket]], [[Update]]

# Method ReleaseNextPacketID:Void()

<p>This is an internal method that will automatically release the next packet identifier in the queue.</p>
<p>This method is protected, but is documented for extension purposes.</p>

# Method AddWaitingMegaPacket:Void(MP:MegaPacket)

<p>This adds @MP to an internal container for "waiting" (Remote) [[MegaPacket]] objects.</p>
<p>This method is protected, but is documented for extension purposes.</p>

# Method RemoveWaitingMegaPacket:Void(MP:MegaPacket)

<p>This is used to remote @MP from an internal container of "waiting" (Client-created) [[MegaPacket|MegaPackets]].</p>
<p>This method is protected, but is documented for extension purposes.</p>

See also: [[AddWaitingMegaPacket]], [[NetworkEngine.AllocateRemoteMegaPacket]]

# Method RemoveWaitingMegaPacket:Void(ID:PacketID)

<p>This removes a "waiting" [[MegaPacket]] with @ID; calls the [[RemoveWaitingMegaPacket|main implementation]].</p>
<p>This method is protected, but is documented for extension purposes.</p>

# Method GetWaitingMegaPacket:MegaPacket(ID:PacketID)

<p>This retrieves a "waiting" [[MegaPacket]] object with @ID.</p>
<p>For details, view the [[AddWaitingMegaPacket]] method's documentation.</p>

<p>This method is protected, but is documented for extension purposes.</p>

See also: [[AddWaitingMegaPacket]], [[RemoveWaitingMegaPacket]]

# Method HasWaitingMegaPacket:Bool(ID:PacketID)

<p>This states if a [[MegaPacket]] object with @ID is inside this object's [[WaitingMegaPackets|"waiting mega-packets" container]].</p>
<p>This method is protected, but is documented for extension purposes.</p>

See also: [[GetWaitingMegaPacket]], [[AddWaitingMegaPacket]], [[RemoveWaitingMegaPacket]]

# Method ResetPacketTimer:TimePoint()

<p>This resets the internal [[PacketReleaseTimer|"packet timer"]], used for releasing reliable-packet identifiers.</p>
<p>This method is protected, but is documented for extension purposes.</p>

# Method ResetPingTimer:TimePoint()

<p>This resets an internal timer used for [[ProjectedPing|ping calculation]].</p>
<p>This method is protected, but is documented for extension purposes.</p>

# Method CalculatePing:Void(Network:NetworkEngine, StopPinging:Bool=True)

<p>This assigns this client's ping using [[ProjectedPing]], resets the internal [[PingTimer|"ping timer"]], then resets the [[Pinging]] flag.</p>
<p>This method is protected, but is documented for extension purposes.</p>


# Method Closing:Bool() Property

This specifies if this client is in the process of disconnecting/closing. (Ignored for formal messages; only internal messages will be accepted)

# Method Closing:Void(Input:Bool) Property

Use caution when setting this property-overload. (Handled internally, use at your own risk)

# Method Closed:Bool() Property

This specifies if this client handle has been closed by a network and/or user.

# Method ManagesPackets:Bool() Property

This corresponds to the constructor argument of the same name.

See also:

[[New]], [[Construct_Client]]

# Method Ping:NetworkPing() Property

This specifies the last known ping of this client. This does not change while calculating a new ping.

# Method Pinging:Bool() Property

This specifies if this client is currently calculating a ping. The [[Ping]] property is still valid while this is [[True]].

This property has protected assignment-access.

# Method PingTimer:TimePoint() Property

The last point in time used when pinging began.

This property has protected assignment-access.

See also: [[Pinging]], [[Ping]]

# Method Address:NetworkAddress() Property

The address associated with this client; may be [[Null]] depending on the underlying transport protocol. (Available for UDP)

See also: [[New]]

# Method Connection:Socket() Property

The [[Socket]] associated with this client; may be [[Null]] depending on the underlying transport protocol. (Available for TCP)


# Field ConfirmedPackets:Deque<PacketID>

<p>This is a <i>double-ended</i> <u>queue</u> of confirmed [[PacketID|PacketIDs]], representing received [[ReliablePacket|ReliablePackets]].</p>
<p>This field is protected, but is documented for extension purposes.</p>

# Field WaitingMegaPackets:Stack<MegaPacket>

<p>This is a collection of "waiting" (Remotely created) [[MegaPacket]] objects.</p>
<p>This field is protected, but is documented for extension purposes.</p>

# Field PacketReleaseTimer:TimePoint

<p>This is a "timer" (Point in time) used to calculate the amount of time between [[PacketID]] releases from [[ConfirmedPackets]].</p>
