# Module regal.networking.socket

# Import regal.networking.engine

# Import brl.asyncevent
# Import brl.socket

# Import dom.websocket

<p>
This module is used internally to provide several lower-level components, namely, an underlying [[Socket]] implementation. The [[Socket]] type, as described throughout lower-level parts of the documentation, can be any type delegated here. This is symbolic, so it's meant as an unrelated handle. For details, read on.
</p>
<br>
<p>
This <b>does not</b> cover a cohesive API across backends, the main purpose of this module is to provide native behavior and "type-consistency" (Names, relations, etc).
</p>
<p>
Types provided here are symbolic, and should only be used as this document describes. Not following these documents is considered "unsafe", and may result in undefined behavior under some environments. That's not to say there's anything wrong with using technology specific features, but they aren't covered by this ecosystem.
</p>
<p>
The only exception being types that describe traits that will be the same across environments. For example, [[NetworkAddress]] explicitly describes an API usable across internal boundries, and maintains at least a subset of its provided features.
</p>
<p>
<b>Please take note</b> that normal APIs expecting natively or "portably" (Symbolic) described objects are portable unless stated otherwise.
For example, [[NetworkEngine.AddressesEqual]] is a portable component of the API.
This means the type, no matter the origin, will be supported. Once again, exact rules and behaviors may need further description.
</p>

# Class NetworkAddress

<p>
This API describes an address as a cohesive component, delegating a discrete set of portable features. The best parallel to this currently is the [[SocketAddress]] type. This type should never be <i>assumed</i> to be compatible with that type, nor should you use that type with [[regal.networking|this module]]'s API.
</p>


# Method New()

<p>This is used internally to create an "empty address".</p>

# Method New(Host:String, Port:Int)

<p>This creates an address representative using @Host and @Port.</p>
<p>This object may store @Host, or any native representation of it.</p>
<p>However, the output from the [[Host]] property must be the same as this argument.</p>
<p>The @Host argument may contain platform-specific symbols if necessary.</p>
<p>These limits do not apply to @Port, which will retain its numeric value [[Port|internally]]. (Encoding aside)</p>

# Method New(Addr:NetworkAddress)

<p>This creates an exact replica of @Addr with separate storage semantics.</p>
<p>The [[Host]] and [[Port]] properties will behave the same.</p>


# Method Host:String() Property

<p>This returns the original hostname provided when this object was created.</p>
<p>Following standard construction rules, this does not represent its resolved form.</p>

# Method Port:Int() Property

<p>This represents the original port provided when this object was created.</p>
<p>Following standard construction rules, this must represent the original numeric value provided.</p>

# Method ToString:String() Property

<p>This provides a string representation of this address.</p>
<p>This will be an implementation-specific hostname, a protocol/implementation dependent separator, and a system-native representation of a port.</p>
<p>Behavior is not guaranteed to be consistent. Consequently, beware of implicit string-conversion.</p>
<p>This type reserves the right to pre-compute the result of this property.</p>


# Class Socket

<p>Objects of this type act as symbolic handles to "native" socket objects.</p>
<p>The exact type this represents depends on the target. Regardless of their original titles, these types may be represented under the name "Socket".</p>
<p>
This framework reserves the right to represent underlying socket technologies through other supporting types.
In other words, the "native socket" type used may directly correspond to the type "Socket" represents.
</p>
<p>To resolve a "Socket" to its native form (Ideal for extension), call [[GetNativeSocket]].</p>


# Function GetNativeSocket:Object(S:Socket)

<p>This takes @S, and retrieves a platform-dependent socket object.</p>
<p>This object may or may not be the same as @S. For details, please read the [[Socket|documentation for Socket]].</p>
<p>Despite the described prototype, this does not only return an [[Object]] handle.</p>

# Function GetNativeSocket:Object(E:NetworkEngine)

<p>This takes the internal [[NetworkEngine.Socket]] object from @E, and calls the [[GetNativeSocket|main overload]] of this command.</p>
<p>Despite the described prototype, this does not only return an [[Object]] handle.</p>
